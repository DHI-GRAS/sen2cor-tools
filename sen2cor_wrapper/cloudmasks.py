import os

import scipy.ndimage
from gdal_utils import gdal_utils as gu

from .tools import get_tiles_projtrans
from .tools import tile_from_fname


def export_cloud_masks(classfiles, outdir, xmlfile, src_res, tgt_res):
    """Export cloud masks from scene classification files generated by sen2cor

    Parameters
    ----------
    classfiles : list of str
        paths to classification files
    outdir : str
        output directory for GeoTif
    xmlfile : str
        path to tiles metadata xml
    src_res : int
        source resolution from S2 files
    tgt_res : int
        target resolution for cloud masks
    """
    # get granule names - one for each class file
    granules = [tile_from_fname(fn) for fn in classfiles]

    # get projection and geotransform from meta data
    projtrans = get_tiles_projtrans(xmlfile, granules, out_res=tgt_res)

    # run through class files
    for classfile, granule in zip(classfiles, granules):

        outfname = os.path.splitext(os.path.basename(classfile))[0] + '_cloudmask.tif'
        outfile = os.path.join(outdir, outfname)

        # get cloud mask 0/1
        arr = classification_to_cloud_mask(
                classfile, src_res=src_res, tgt_res=tgt_res)

        # get target shape
        projkw = projtrans[granule].copy()
        nx = projkw.pop('nx')
        ny = projkw.pop('ny')

        # make sure cloud mask shape matches target shape
        if not arr.shape == (ny, nx):
            raise ValueError('Cloud mask does not have correct size. '
                    'Has {}, expecting {}.'.format(arr.shape, (ny, nx)))

        # save to tif
        gu.array_to_gtiff(arr, outfile, **projkw)


def classification_to_cloud_mask(classfile, src_res, tgt_res):
    """Retrieve cloud mask from sen2cor classification file

    Parameters
    ----------
    classfile : str
        path to sen2cor scene classficiation file
    src_res : int
        sen2cor scene classification resolution
    tgt_rest : int
        target resolution for cloud mask
    """
    # get data as int
    classes = gu.retrieve_array_masked(classfile, tgt_dtype='uint8')

    # clouds are 8, 9, and 10
    mask = (classes == 3) | (classes == 7) | (classes == 8) | (classes == 9) | (classes == 10)
    mask = mask.filled(True)

    # convert bool mask to int
    maskint = mask.astype(int)

    # interpolate to target resolution
    zoom = src_res / float(tgt_res)
    maskintzoom = scipy.ndimage.interpolation.zoom(maskint, zoom, order=0)

    return maskintzoom
